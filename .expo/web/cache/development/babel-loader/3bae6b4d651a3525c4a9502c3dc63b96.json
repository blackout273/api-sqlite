{"ast":null,"code":"import db from \"./SQLiteDatabase.js\";\ndb.transaction(function (tx) {\n  tx.executeSql(\"CREATE TABLE dadosUsuarios ( id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, email VARCHAR (100), senha VARCHAR (64), usuario VARCHAR (64), createdAt DATETIME DEFAULT (CURRENT_TIMESTAMP) );\");\n});\n\nvar create = function create(obj) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"INSERT INTO dadosUsuarios (email, senha, usuario) values (?, ?, ?);\", [obj.email, obj.senha, obj.usuario], function (_, _ref) {\n        var rowsAffected = _ref.rowsAffected,\n            insertId = _ref.insertId;\n        if (rowsAffected > 0) resolve(insertId);else reject(\"Error inserting obj: \" + JSON.stringify(obj));\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nvar update = function update(id, obj) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"UPDATE cars SET brand=?, model=?, hp=? WHERE id=?;\", [obj.brand, obj.model, obj.hp, id], function (_, _ref2) {\n        var rowsAffected = _ref2.rowsAffected;\n        if (rowsAffected > 0) resolve(rowsAffected);else reject(\"Error updating obj: id=\" + id);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nvar find = function find(email) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM dadosUsuarios WHERE email=?;\", [email], function (_, _ref3) {\n        var rows = _ref3.rows;\n        console.log(rows[0].email);\n        if (rows.length > 0) resolve(rows[0].email);else reject(\"Obj not found: email=\" + email);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nvar findByBrand = function findByBrand(brand) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM cars WHERE brand LIKE ?;\", [brand], function (_, _ref4) {\n        var rows = _ref4.rows;\n        if (rows.length > 0) resolve(rows._array);else reject(\"Obj not found: brand=\" + brand);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nvar all = function all() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM dadosUsuarios;\", [], function (_, _ref5) {\n        var rows = _ref5.rows;\n        return resolve(rows._array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nvar remove = function remove(id) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(\"DELETE FROM cars WHERE id=?;\", [id], function (_, _ref6) {\n        var rowsAffected = _ref6.rowsAffected;\n        resolve(rowsAffected);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\n\nexport default {\n  create: create,\n  update: update,\n  find: find,\n  findByBrand: findByBrand,\n  all: all,\n  remove: remove\n};","map":{"version":3,"names":["db","transaction","tx","executeSql","create","obj","Promise","resolve","reject","email","senha","usuario","_","rowsAffected","insertId","JSON","stringify","error","update","id","brand","model","hp","find","rows","console","log","length","findByBrand","_array","all","remove"],"sources":["C:/Users/Danillo/Desktop/documentosEstacio/Programação para dispositivos moveis/crud/src/functions/database/usuarios.js"],"sourcesContent":["import db from \"./SQLiteDatabase.js\";\r\n\r\n/**\r\n * INICIALIZAÇÃO DA TABELA\r\n * - Executa sempre, mas só cria a tabela caso não exista (primeira execução)\r\n */\r\ndb.transaction((tx) => {\r\n  //<<<<<<<<<<<<<<<<<<<<<<<< USE ISSO APENAS DURANTE OS TESTES!!! >>>>>>>>>>>>>>>>>>>>>>>\r\n  //tx.executeSql(\"DROP TABLE cars;\");\r\n  //<<<<<<<<<<<<<<<<<<<<<<<< USE ISSO APENAS DURANTE OS TESTES!!! >>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n  tx.executeSql(\r\n    \"CREATE TABLE dadosUsuarios ( id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, email VARCHAR (100), senha VARCHAR (64), usuario VARCHAR (64), createdAt DATETIME DEFAULT (CURRENT_TIMESTAMP) );\"\r\n  );\r\n});\r\n\r\n/**\r\n * CRIAÇÃO DE UM NOVO REGISTRO\r\n * - Recebe um objeto;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise é o ID do registro (criado por AUTOINCREMENT)\r\n *  - Pode retornar erro (reject) caso exista erro no SQL ou nos parâmetros.\r\n */\r\nconst create = (obj) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"INSERT INTO dadosUsuarios (email, senha, usuario) values (?, ?, ?);\",\r\n        [obj.email, obj.senha, obj.usuario],\r\n        //-----------------------\r\n        (_, { rowsAffected, insertId }) => {\r\n          if (rowsAffected > 0) resolve(insertId);\r\n          else reject(\"Error inserting obj: \" + JSON.stringify(obj)); // insert falhou\r\n        },\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * ATUALIZA UM REGISTRO JÁ EXISTENTE\r\n * - Recebe o ID do registro e um OBJETO com valores atualizados;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise é a quantidade de registros atualizados;\r\n *  - Pode retornar erro (reject) caso o ID não exista ou então caso ocorra erro no SQL.\r\n */\r\nconst update = (id, obj) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"UPDATE cars SET brand=?, model=?, hp=? WHERE id=?;\",\r\n        [obj.brand, obj.model, obj.hp, id],\r\n        //-----------------------\r\n        (_, { rowsAffected }) => {\r\n          if (rowsAffected > 0) resolve(rowsAffected);\r\n          else reject(\"Error updating obj: id=\" + id); // nenhum registro alterado\r\n        },\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * BUSCA UM REGISTRO POR MEIO DO ID\r\n * - Recebe o ID do registro;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise é o objeto (caso exista);\r\n *  - Pode retornar erro (reject) caso o ID não exista ou então caso ocorra erro no SQL.\r\n */\r\nconst find = (email) => {\r\n    return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"SELECT * FROM dadosUsuarios WHERE email=?;\",\r\n        [email],\r\n        //-----------------------\r\n        (_, { rows }) => {\r\n            console.log(rows[0].email)\r\n          if (rows.length > 0) resolve(rows[0].email);\r\n          else reject(\"Obj not found: email=\" + email); // nenhum registro encontrado\r\n        },\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * BUSCA UM REGISTRO POR MEIO DA MARCA (brand)\r\n * - Recebe a marca do carro;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise é um array com os objetos encontrados;\r\n *  - Pode retornar erro (reject) caso o ID não exista ou então caso ocorra erro no SQL;\r\n *  - Pode retornar um array vazio caso nenhum objeto seja encontrado.\r\n */\r\nconst findByBrand = (brand) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"SELECT * FROM cars WHERE brand LIKE ?;\",\r\n        [brand],\r\n        //-----------------------\r\n        (_, { rows }) => {\r\n          if (rows.length > 0) resolve(rows._array);\r\n          else reject(\"Obj not found: brand=\" + brand); // nenhum registro encontrado\r\n        },\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * BUSCA TODOS OS REGISTROS DE UMA DETERMINADA TABELA\r\n * - Não recebe parâmetros;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise é uma lista (Array) de objetos;\r\n *  - Pode retornar erro (reject) caso o ID não exista ou então caso ocorra erro no SQL;\r\n *  - Pode retornar um array vazio caso não existam registros.\r\n */\r\nconst all = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"SELECT * FROM dadosUsuarios;\",\r\n        [],\r\n        //-----------------------\r\n        (_, { rows }) => resolve(rows._array),\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * REMOVE UM REGISTRO POR MEIO DO ID\r\n * - Recebe o ID do registro;\r\n * - Retorna uma Promise:\r\n *  - O resultado da Promise a quantidade de registros removidos (zero indica que nada foi removido);\r\n *  - Pode retornar erro (reject) caso o ID não exista ou então caso ocorra erro no SQL.\r\n */\r\nconst remove = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      //comando SQL modificável\r\n      tx.executeSql(\r\n        \"DELETE FROM cars WHERE id=?;\",\r\n        [id],\r\n        //-----------------------\r\n        (_, { rowsAffected }) => {\r\n          resolve(rowsAffected);\r\n        },\r\n        (_, error) => reject(error) // erro interno em tx.executeSql\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport default {\r\n  create,\r\n  update,\r\n  find,\r\n  findByBrand,\r\n  all,\r\n  remove,\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}